// client side
// if the command is "list"
if(strcmp(buff,"list") == 0){
    char state[2];
    recv(sd,state,2,0);
    state[1] = '\0';
    // if the state send from server is not error
    while(strcmp("1",state) == 0){
        char name[PATH_MAX];
        recv(sd,state,2,0);
        // if the state is error or no more data is sent from server, escape the loops
        if(strcmp("1",state) != 0){
            break;
        }
        recv(sd,name, sizeof(name),0);
        // print the file name
        printf("%s\n",name);
    }   
} 

// server side

if(strcmp("list",buff) == 0){
    DIR *folder;
    struct dirent *entry;
    char cwd[PATH_MAX];
    getcwd(cwd, sizeof(cwd));
    strcat(cwd, "/data");
    folder = opendir(cwd);
    // state "1" means everything is ok
    char state[2];
    state[0] = '1';
    state[1] = '\0';
    send(client_sd,state,2,0);
    
    
    while((entry = readdir(folder)) != NULL){
        char l_file[PATH_MAX];
        send(client_sd,state,2,0);
        // Get the file name.
        strcpy(l_file, entry->d_name);
        send(client_sd, l_file, sizeof(l_file),0);
    }
    // While there is no more file, send state "0" to client meaning that
    // there is no more files.
    state[0] = '0';
    send(client_sd,state,2,0);
    closedir(folder);
}


//---------------------------------------------------------
//-----------------------Without While---------------------
//---------------------------------------------------------

//Client side
if(strcmp(buff,"list") == 0){
    int size;
    read(sd, &size, sizeof(size));
    size = ntohl(size);
    printf("size : %d\n",size);
    char name[size];
    recv(sd,name,size,0);
    name[size] = '\0';
    printf("%s",name);
}

//Server side
if(strcmp("list",buff) == 0){
    DIR *folder;
    struct dirent *entry;
    char cwd[PATH_MAX];
    getcwd(cwd, sizeof(cwd));
    strcat(cwd, "/data");
    folder = opendir(cwd);
    
    char *filename = NULL;
        
    while((entry = readdir(folder)) != NULL){
        filename = (char *) realloc(filename, sizeof(filename) + sizeof(entry->d_name) + 1);
        strcat(filename, entry->d_name);
        strcat(filename, "\n");
    }
    int size;
    size = strlen(filename);
    size = htonl(size);
    write(client_sd, &size, sizeof(size));
    send(client_sd, filename, size, 0);
}
